{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkInput","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","_char","isValidInput","request","json_response","wrap","_context","prev","next","char","key","match","console","log","fetch","base_url","method","sent","status","updateStatus","stop","_x","apply","arguments","startGame","_callee2","_context2","then","response","json","message","document","addEventListener","_callee3","_context3","headers","Content-Type","Accept","finishGame","_callee4","_context4","removeEventListener","process","react_default","createElement","className","src","logo","alt","href","target","rel","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.502c3034.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    console.log(process.env.NODE_ENV);\n    if (process.env.NODE_ENV === \"development\") {\n      this.base_url = \"http://\" + window.location.hostname + \":5000/\";\n    } else {\n      this.base_url = \"/\";\n    }\n  }\n\n  checkInput = async (e) => {\n    const char = e.key;\n\n    const isValidInput = char.match(/[a-z0-9]/gi);\n    console.log(isValidInput);\n    if (isValidInput) {\n      const request = await fetch(this.base_url + \"guess/\" + char, {\n        method: \"POST\"\n      });\n\n      const json_response = await request.status;\n      this.updateStatus();\n      console.log(json_response);\n    } else {\n      console.log(\"invalid key\");\n    }\n  };\n\n  startGame = async () => {\n    console.log(\"Starting new game\");\n    await fetch(this.base_url + \"new\", { method: \"POST\" })\n      .then((response) => response.json())\n      .then((message) => {\n        document.addEventListener(\"keyup\", this.checkInput);\n        console.log(message.status);\n      })\n      .then(() => this.updateStatus());\n\n    // If the game is in progress, then add the eventListener to catch keyboard presses.\n  };\n\n  updateStatus = async () => {\n    // Function loads the game status\n    console.log(\"Loading status data\");\n    await fetch(this.base_url + \"status\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    })\n      .then((response) => response.json())\n      .then((message) => console.log(message));\n\n    // gameStatus.innerHTML = json_response.game_status;\n    // console.log(\"game status\", json_response.status);\n    // guessResult.innerHTML = json_response.guess_result;\n    // guessedChars.innerHTML = json_response.guessed_chars.split(\"\");\n    // attempts.innerHTML = json_response.guessed_chars.length;\n\n    // console.log(\"Response:\", json_response.guess_result);\n  };\n\n  finishGame = async () => {\n    document.removeEventListener(\"keyup\", this.checkInput);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Check</p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <div onClick={this.startGame}>StartGame</div>\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}