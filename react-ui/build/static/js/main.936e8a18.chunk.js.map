{"version":3,"sources":["components/scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["ScoreBoard","styled","div","_templateObject","scoreboard","props","react_default","a","createElement","highscores","map","entry","index","key","player_name","score","HangmanApp","App_templateObject","GameHint","_templateObject2","Header","h1","_templateObject3","StartButton","button","_templateObject4","App","input","_templateObject5","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startGame","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","console","log","setState","showScores","fetch","base_url","method","then","response","json","stop","loadHighscores","_callee2","_context2","postHighscore","_callee3","_context3","headers","Accept","Content-Type","body","JSON","stringify","state","showRegisterScore","document","addEventListener","checkInput","_ref4","_callee4","e","_char","_context4","char","lastChar","match","abrupt","status","objectSpread","game_hint","removeEventListener","_x","apply","arguments","loadStatus","_callee5","_context5","componentWillMount","handlePlayerNameChange","target","value","handleMobileInput","preventDefault","keycode","which","code","String","fromCharCode","guesses_left","guessed_chars","length","guess_result","id","type","onChange","autoFocus","placeholder","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VAGA,IAAMA,EAAaC,IAAOC,IAAVC,KAEDC,EAAA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAACR,EAAD,KACEM,EAAAC,EAAAC,cAAA,wBACCH,EAAMI,YACLJ,EAAMI,WAAWC,IAAI,SAACC,EAAOC,GAC3B,OACEN,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,GACPD,EAAMG,YADT,MACyBH,EAAMI,k6BCT3C,IAAMC,EAAaf,IAAOC,IAAVe,KAoBVC,EAAWjB,IAAOC,IAAViB,KAKRC,EAASnB,IAAOoB,GAAVC,KAINC,EAActB,IAAOuB,OAAVC,KAcIC,GARFzB,IAAO0B,MAAVC,iBASd,SAAAF,EAAYrB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAM3B,KAsBR+B,UAvBmBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAA/B,EAAAgC,KAuBP,SAAAC,IAAA,OAAAF,EAAA/B,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVC,QAAQC,IAAI,qBACZjB,EAAKkB,SAAS,CAAEC,YAAY,IAFlBN,EAAAE,KAAA,EAGJK,MAAMpB,EAAKqB,SAAW,MAAO,CAAEC,OAAQ,SAC1CC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACE,GAELzB,EAAKkB,SAASO,KAPR,wBAAAZ,EAAAa,SAAAf,MAvBOX,EAmCnB2B,eAnCmB1B,OAAAO,EAAA,EAAAP,CAAAQ,EAAA/B,EAAAgC,KAmCF,SAAAkB,IAAA,OAAAnB,EAAA/B,EAAAkC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cACfC,QAAQC,IAAI,sBADGY,EAAAd,KAAA,EAETK,MAAMpB,EAAKqB,SAAW,cACzBE,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACE,GACLzB,EAAKkB,SAAS,CAAEtC,WAAY6C,IAC5BT,QAAQC,IAAI,cAAeQ,KANhB,wBAAAI,EAAAH,SAAAE,MAnCE5B,EA6CnB8B,cA7CmB7B,OAAAO,EAAA,EAAAP,CAAAQ,EAAA/B,EAAAgC,KA6CH,SAAAqB,IAAA,OAAAtB,EAAA/B,EAAAkC,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACdC,QAAQC,IAAI,qBADEe,EAAAjB,KAAA,EAERK,MAAMpB,EAAKqB,SAAW,YAAa,CACvCC,OAAQ,OACRW,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBrD,YAAae,EAAKuC,MAAMtD,gBAGzBsC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACE,GAELzB,EAAKkB,SAAS,CACZtC,WAAY6C,EACZN,YAAY,EACZW,eAAe,EACfU,mBAAmB,IAIrBC,SAASC,iBAAiB,QAAS1C,EAAK2C,cAvB9B,wBAAAX,EAAAN,SAAAK,MA7CG/B,EAyEnB2C,WAzEmB,eAAAC,EAAA3C,OAAAO,EAAA,EAAAP,CAAAQ,EAAA/B,EAAAgC,KAyEN,SAAAmC,EAAOC,GAAP,IAAAC,EAAA,OAAAtC,EAAA/B,EAAAkC,KAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,UACLkC,EAAOH,EAAIA,EAAE9D,IAAMgB,EAAKuC,MAAMU,KAEpCjD,EAAKkB,SAAS,CAAE+B,KAAM,GAAIC,SAAUD,KAEhCA,EAAKE,MAAM,SALJ,CAAAH,EAAAjC,KAAA,eAMTf,EAAKO,YANIyC,EAAAI,OAAA,oBAUe,WAAtBpD,EAAKuC,MAAMc,OAVJ,CAAAL,EAAAjC,KAAA,eAAAiC,EAAAI,OAAA,oBAce,WAAtBpD,EAAKuC,MAAMc,QAAgC,WAATJ,EAd3B,CAAAD,EAAAjC,KAAA,gBAgBTf,EAAKO,YAhBIyC,EAAAI,OAAA,sBAoBUH,EAAKE,MAAM,cApBrB,CAAAH,EAAAjC,KAAA,gBAsBTf,EAAKkB,SAALjB,OAAAqD,EAAA,EAAArD,CAAA,GACKD,EAAKuC,MADV,CAEEc,OAAQ,UACRE,UAAW,iBAzBJP,EAAAjC,KAAA,GA2BHK,MAAMpB,EAAKqB,SAAW,SAAW4B,EAAM,CAC3C3B,OAAQ,SAEPC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACE,GACLzB,EAAKkB,SAASO,GACdT,QAAQC,IAAIjB,EAAKuC,OACG,cAAhBd,EAAK4B,QAA0C,aAAhB5B,EAAK4B,QACtCrD,EAAKkB,SAAS,CAAEC,YAAY,IAC5BH,QAAQC,IAAIjB,EAAKuC,QACQ,cAAhBd,EAAK4B,SAEdZ,SAASe,oBAAoB,QAASxD,EAAK2C,YAC3C3C,EAAKkB,SAAS,CAAEsB,mBAAmB,OAxChC,QAAAQ,EAAAjC,KAAA,iBA4CTf,EAAKkB,SAAS,CAAEqC,UAAW,yBAC3BvC,QAAQC,IAAI,cAAegC,GA7ClB,yBAAAD,EAAAtB,SAAAmB,MAzEM,gBAAAY,GAAA,OAAAb,EAAAc,MAAAvD,KAAAwD,YAAA,GAAA3D,EA2HnB4D,WA3HmB3D,OAAAO,EAAA,EAAAP,CAAAQ,EAAA/B,EAAAgC,KA2HN,SAAAmD,IAAA,OAAApD,EAAA/B,EAAAkC,KAAA,SAAAkD,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA/C,MAAA,cACXC,QAAQC,IAAI,uBADD6C,EAAA/C,KAAA,EAELK,MAAMpB,EAAKqB,SAAW,SAAU,CACpCY,QAAS,CACPE,eAAgB,mBAChBD,OAAQ,sBAGTX,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACE,GACLT,QAAQC,IAAI,aAAcQ,GAC1BzB,EAAKkB,SAASO,KAXP,wBAAAqC,EAAApC,SAAAmC,MA3HM7D,EA0InB+D,mBAAqB,WACnB/D,EAAK4D,aACL5D,EAAK2B,kBA5IY3B,EA+InBgE,uBAAyB,SAAClB,GACV,UAAVA,EAAE9D,KACJgB,EAAK8B,gBAGP9B,EAAKkB,SAAS,CAAEjC,YAAa6D,EAAEmB,OAAOC,SApJrBlE,EAuJnBmE,kBAAoB,SAACrB,GACnBA,EAAEsB,iBAEF,IAAInB,EAAOH,EAAE9D,IAEPqF,EAAUvB,EAAEwB,OAASxB,EAAEyB,KACxBtB,IACHA,EAAOuB,OAAOC,aAAaJ,IAG7BrE,EAAKkB,SAAS,CAAE+B,SAChBjD,EAAK2C,cA/JL3C,EAAKuC,MAAQ,CACXgB,UAAW,mCACXpC,YAAY,EACZqB,mBAAmB,EACnBvD,YAAa,GACbgE,KAAM,GACNC,SAAU,IAIZT,SAASC,iBAAiB,QAAS1C,EAAK2C,YAKtC3C,EAAKqB,SAAW,IAlBDrB,wEAsKjB,IAAM0E,EAAevE,KAAKoC,MAAMoC,cAC5B,EAAIxE,KAAKoC,MAAMoC,cAAcC,OAC7B,EAEJ,OACEnG,EAAAC,EAAAC,cAACQ,EAAD,KACEV,EAAAC,EAAAC,cAACY,EAAD,iBACwB,WAAtBY,KAAKoC,MAAMc,QACW,YAAtBlD,KAAKoC,MAAMc,SACX5E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKwB,KAAKoC,MAAMsC,cAChBpG,EAAAC,EAAAC,cAAA,4BAAoB+F,GACpBjG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SAAIwB,KAAKoC,MAAMoC,iBAKE,cAAtBxE,KAAKoC,MAAMc,QACV5E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,iBAIHwB,KAAKoC,MAAMpB,YACV1C,EAAAC,EAAAC,cAACJ,EAAD,CAAYK,WAAYuB,KAAKoC,MAAM3D,aAGpCuB,KAAKoC,MAAMC,mBACV/D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,qBAAawB,KAAKoC,MAAMrD,OACxBT,EAAAC,EAAAC,cAAA,SACEmG,GAAG,aACHC,KAAK,OACLb,MAAO/D,KAAKoC,MAAMtD,YAClB+F,SAAU7E,KAAK6D,uBACfiB,WAAS,EACTC,YAAY,oBAEdzG,EAAAC,EAAAC,cAAA,UAAQwG,QAAShF,KAAK2B,eAAtB,SAImB,aAAtB3B,KAAKoC,MAAMc,QACV5E,EAAAC,EAAAC,cAAA,0BAAkBwB,KAAKoC,MAAMrD,OAU/BT,EAAAC,EAAAC,cAACe,EAAD,CAAayF,QAAShF,KAAKI,WAA3B,YAEA9B,EAAAC,EAAAC,cAACU,EAAD,CAAU0F,KAAK,QAAQ5E,KAAKoC,MAAMgB,mBAlOT6B,IAAMC,YCnCnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStC,MACvB,2DCZNuC,IAASC,OAAOlH,EAAAC,EAAAC,cAACiH,EAAD,MAASnD,SAASoD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzE,KAAK,SAAA0E,GACjCA,EAAaC","file":"static/js/main.936e8a18.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ScoreBoard = styled.div``;\n\nexport default (props) => {\n  return (\n    <ScoreBoard>\n      <h2>Highscores</h2>\n      {props.highscores &&\n        props.highscores.map((entry, index) => {\n          return (\n            <div key={index}>\n              {entry.player_name} - {entry.score}\n            </div>\n          );\n        })}\n    </ScoreBoard>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ScoreBoard from \"./components/scoreboard\";\n\nconst HangmanApp = styled.div`\n  display: absolute;\n  align-content: center;\n  max-width: 600px;\n  width: 90vw;\n  height: 70vh;\n  transform: translateY(15%);\n  margin: auto;\n  border: solid 1px #cccccc;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  div {\n    margin: auto;\n    padding: 5px;\n    text-align: center;\n  }\n`;\n\nconst GameHint = styled.div`\n  margin: auto;\n  width: 100%;\n`;\n\nconst Header = styled.h1`\n  text-align: center;\n`;\n\nconst StartButton = styled.button`\n  font-family: inherit;\n  font-size: 1em;\n  align: center;\n`;\n\nconst InputField = styled.input`\n  border: solid 1px #cccccc;\n  padding: 10px;\n  font-size: 1em;\n  font-family: inherit;\n  z-index: 1;\n`;\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      game_hint: \"Press spacebar to start new game\",\n      showScores: false,\n      showRegisterScore: false,\n      player_name: \"\",\n      char: \"\",\n      lastChar: \"\"\n    };\n\n    // Add the eventListener to catch keyboard presses.\n    document.addEventListener(\"keyup\", this.checkInput);\n\n    if (process.env.NODE_ENV === \"development\") {\n      this.base_url = \"http://\" + window.location.hostname + \":5000/\";\n    } else {\n      this.base_url = \"/\";\n    }\n  }\n\n  // Start a new game\n  startGame = async () => {\n    console.log(\"Starting new game\");\n    this.setState({ showScores: false });\n    await fetch(this.base_url + \"new\", { method: \"POST\" })\n      .then((response) => response.json())\n      .then((json) => {\n        // Update state so that the UI updates.\n        this.setState(json);\n      });\n  };\n\n  // Load highscores\n  loadHighscores = async () => {\n    console.log(\"Loading highscores\");\n    await fetch(this.base_url + \"highscores\")\n      .then((response) => response.json())\n      .then((json) => {\n        this.setState({ highscores: json });\n        console.log(\"Highscores:\", json);\n      });\n  };\n\n  postHighscore = async () => {\n    console.log(\"Posting highscore\");\n    await fetch(this.base_url + \"highscore\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        player_name: this.state.player_name\n      })\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        // Update state so that the UI updates.\n        this.setState({\n          highscores: json,\n          showScores: true,\n          postHighscore: false,\n          showRegisterScore: false\n        });\n\n        // Re-enable the event listener for accepting space bar for new game.\n        document.addEventListener(\"keyup\", this.checkInput);\n      });\n  };\n\n  // Make a guess by capturing keyboard input\n  checkInput = async (e) => {\n    const char = e ? e.key : this.state.char;\n\n    this.setState({ char: \"\", lastChar: char });\n\n    if (char.match(/[ ]/gi)) {\n      this.startGame();\n      return;\n    }\n\n    if (this.state.status !== \"ACTIVE\") {\n      return;\n    }\n\n    if (this.state.status === \"ACTIVE\" && char === \"Escape\") {\n      // Restart the game while it is running from keyboard.\n      this.startGame();\n      return;\n    }\n\n    const isValidInput = char.match(/[a-z0-9]/gi);\n    if (isValidInput) {\n      this.setState({\n        ...this.state,\n        status: \"PENDING\",\n        game_hint: \"Checking...\"\n      });\n      await fetch(this.base_url + \"guess/\" + char, {\n        method: \"POST\"\n      })\n        .then((response) => response.json())\n        .then((json) => {\n          this.setState(json);\n          console.log(this.state);\n          if (json.status === \"GAME_OVER\" || json.status === \"FINISHED\") {\n            this.setState({ showScores: true });\n            console.log(this.state);\n          } else if (json.status === \"HIGHSCORE\") {\n            // Clear event listener so that the score can be inputted..\n            document.removeEventListener(\"keyup\", this.checkInput);\n            this.setState({ showRegisterScore: true });\n          }\n        });\n    } else {\n      this.setState({ game_hint: \"Press key a-z or 0-9\" });\n      console.log(\"invalid key\", char);\n    }\n  };\n\n  //Call game status\n  loadStatus = async () => {\n    console.log(\"Loading status data\");\n    await fetch(this.base_url + \"status\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        console.log(\"Json data \", json);\n        this.setState(json);\n      });\n  };\n\n  componentWillMount = () => {\n    this.loadStatus();\n    this.loadHighscores();\n  };\n\n  handlePlayerNameChange = (e) => {\n    if (e.key === \"Enter\") {\n      this.postHighscore();\n    }\n\n    this.setState({ player_name: e.target.value });\n  };\n\n  handleMobileInput = (e) => {\n    e.preventDefault();\n\n    let char = e.key;\n\n    const keycode = e.which || e.code;\n    if (!char) {\n      char = String.fromCharCode(keycode);\n    }\n\n    this.setState({ char });\n    this.checkInput();\n  };\n\n  render() {\n    const guesses_left = this.state.guessed_chars\n      ? 5 - this.state.guessed_chars.length\n      : 5;\n\n    return (\n      <HangmanApp>\n        <Header>Hangman</Header>\n        {(this.state.status === \"ACTIVE\" ||\n          this.state.status === \"PENDING\") && (\n          <div>\n            <h1>{this.state.guess_result}</h1>\n            <div>Guesses left: {guesses_left}</div>\n            <div>\n              <p>Tried characters:</p>\n              <p>{this.state.guessed_chars}</p>\n            </div>\n          </div>\n        )}\n\n        {this.state.status === \"GAME_OVER\" && (\n          <div>\n            <p>Game over</p>\n            <h1>:(</h1>\n          </div>\n        )}\n\n        {this.state.showScores && (\n          <ScoreBoard highscores={this.state.highscores} />\n        )}\n\n        {this.state.showRegisterScore && (\n          <div>\n            <h2>New highscore!</h2>\n            <div>Score: {this.state.score}</div>\n            <input\n              id=\"playerName\"\n              type=\"text\"\n              value={this.state.player_name}\n              onChange={this.handlePlayerNameChange}\n              autoFocus\n              placeholder=\"Enter your name\"\n            />\n            <button onClick={this.postHighscore}>Send</button>\n          </div>\n        )}\n\n        {this.state.status === \"FINISHED\" && (\n          <div>Game score: {this.state.score}</div>\n        )}\n        {/* <InputField\n          type=\"text\"\n          value={this.state.char}\n          autoFocus\n          onChange={this.checkInput}\n        /> */}\n\n        {/* <div>{this.state.lastChar}</div> */}\n        <StartButton onClick={this.startGame}>New game</StartButton>\n\n        <GameHint type=\"text\">{this.state.game_hint}</GameHint>\n      </HangmanApp>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}