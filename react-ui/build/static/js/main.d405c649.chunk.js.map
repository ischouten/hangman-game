{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["HangmanApp","styled","div","_templateObject","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startGame","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","console","log","fetch","base_url","method","then","response","json","setState","stop","checkInput","_ref2","_callee2","e","_char","_context2","char","key","match","abrupt","state","status","game_hint","_x","apply","arguments","checkStatus","_callee3","_context3","headers","Content-Type","Accept","finishGame","_callee4","_context4","document","removeEventListener","addEventListener","guesses_left","guessed_chars","length","react_default","createElement","guess_result","score","React","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d405c649.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst HangmanApp = styled.div`\n\n  display: flex\n  flex-direction: column;\n  justify-content: space-between;\n  align-content: center;\n  min-width: 600px;\n  width: 50vw;\n  height: 70vh;\n  transform: translateY(15%);\n  margin: auto;\n  border: solid 1px #cccccc;\n\n  div {\n    width: 90%;\n    border: solid 1px #999999;\n    margin: auto;\n    padding: 5px;\n    text-align: center;\n  }\n\n`;\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      game_hint: \"Press spacebar to start\"\n    };\n    // Add the eventListener to catch keyboard presses.\n    // Add a little bit of timeout to prevent triggering while loading document.\n\n    document.addEventListener(\"keyup\", this.checkInput);\n\n    if (process.env.NODE_ENV === \"development\") {\n      this.base_url = \"http://\" + window.location.hostname + \":5000/\";\n    } else {\n      this.base_url = \"/\";\n    }\n  }\n\n  // Start a new game\n  startGame = async () => {\n    console.log(\"Starting new game\");\n    await fetch(this.base_url + \"new\", { method: \"POST\" })\n      .then((response) => response.json())\n      .then((json) => {\n        // Update state so that the UI updates.\n        this.setState(json);\n      });\n  };\n\n  // Make a guess by capturing keyboard input\n  checkInput = async (e) => {\n    const char = e.key;\n\n    if (char.match(/[ ]/gi)) {\n      this.startGame();\n      return;\n    }\n\n    if (this.state.status !== \"ACTIVE\") {\n      return;\n    }\n\n    const isValidInput = char.match(/[a-z0-9]/gi);\n    if (isValidInput) {\n      await fetch(this.base_url + \"guess/\" + char, {\n        method: \"POST\"\n      })\n        .then((response) => response.json())\n        .then((json) => this.setState(json));\n    } else {\n      this.setState({ game_hint: \"Press key a-z or 0-9\" });\n      console.log(\"invalid key\", char);\n    }\n    console.log(\"Current game state:\", this.state);\n  };\n\n  // Call game status\n  checkStatus = async () => {\n    console.log(\"Loading status data\");\n    await fetch(this.base_url + \"status\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        console.log(\"Json data \", json);\n        this.setState(json);\n      });\n  };\n\n  finishGame = async () => {\n    document.removeEventListener(\"keyup\", this.checkInput);\n  };\n\n  render() {\n    const guesses_left = this.state.guessed_chars\n      ? 5 - this.state.guessed_chars.length\n      : 5;\n\n    return (\n      <HangmanApp>\n        <div>Result: {this.state.guess_result}</div>\n        <div>{this.state.game_hint}</div>\n        <div>\n          <p>Tried characters:</p>\n          <p>{this.state.guessed_chars}</p>\n        </div>\n        <div>\n          <p>Game status:</p>\n          <p>{this.state.status}</p>\n        </div>\n\n        {(this.state.status === \"FINISHED\" ||\n          this.state.status === \"HIGHSCORE\") && (\n          <div>Game score: {this.state.score}</div>\n        )}\n\n        <div>Guesses left: {guesses_left}</div>\n        {/* <div onClick={this.startGame}>New game</div> */}\n      </HangmanApp>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}